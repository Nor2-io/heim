#region HEIM-AUTOGENERATED
using DemoGeolocationWorld.wit.imports.heim.demoGeolocation.v1_0_0;
namespace DemoGeolocationWorld.wit.exports.heim.demoGeolocation.v1_0_0;
public partial class GeoLocationImpl : IGeoLocation
{
        
    // Extract Geo-Location from Image
    public static Result<ITypes.ExtractGeoLocationOk,ITypes.ExtractGeoLocationError> ExtractGeoLocation(string Authorization, ITypes.ExtractGeoLocationRequestBody extractGeoLocationRequestBody)
    {
        Result<ITypes.ExtractGeoLocationOk,ITypes.ExtractGeoLocationError> result = Result<ITypes.ExtractGeoLocationOk,ITypes.ExtractGeoLocationError>.Err(ITypes.ExtractGeoLocationError.InternalServerError());
        
        Func<Task> task = async() =>
        {
            result = await ExtractGeoLocationAsync(Authorization, extractGeoLocationRequestBody);
        };
        
        WasiEventLoop.PollWasiEventLoopUntilResolved(task());
        
        return result;
    }
        
    // Retrieve Country Name from Coordinates
    public static Result<ITypes.GetCountryFromCoordinatesOk,ITypes.GetCountryFromCoordinatesError> GetCountryFromCoordinates(string Authorization, ITypes.Coordinates getCountryFromCoordinatesRequestBody)
    {
        Result<ITypes.GetCountryFromCoordinatesOk,ITypes.GetCountryFromCoordinatesError> result = Result<ITypes.GetCountryFromCoordinatesOk,ITypes.GetCountryFromCoordinatesError>.Err(ITypes.GetCountryFromCoordinatesError.InternalServerError());
        
        Func<Task> task = async() =>
        {
            result = await GetCountryFromCoordinatesAsync(Authorization, getCountryFromCoordinatesRequestBody);
        };
        
        WasiEventLoop.PollWasiEventLoopUntilResolved(task());
        
        return result;
    }
        
    // Retrieve Sun Rise and Set Times
    public static Result<ITypes.GetSunTimesOk,ITypes.GetSunTimesError> GetSunTimes(string Authorization, ITypes.SunTimesRequest getSunTimesRequestBody)
    {
        Result<ITypes.GetSunTimesOk,ITypes.GetSunTimesError> result = Result<ITypes.GetSunTimesOk,ITypes.GetSunTimesError>.Err(ITypes.GetSunTimesError.InternalServerError());
        
        Func<Task> task = async() =>
        {
            result = await GetSunTimesAsync(Authorization, getSunTimesRequestBody);
        };
        
        WasiEventLoop.PollWasiEventLoopUntilResolved(task());
        
        return result;
    }

}
#endregion HEIM-AUTOGENERATED
